{"ast":null,"code":"var _jsxFileName = \"D:\\\\SE-project\\\\textbook_genius\\\\frontend\\\\reactapp\\\\src\\\\components\\\\FileUpload.js\";\nimport React, { useState } from 'react';\nimport { Button } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  onFileSelect,\n  acceptedFileTypes,\n  label\n}) => {\n  /**\r\n   * FileUpload 组件\r\n   *\r\n   * 用于上传文件的通用组件。支持指定文件类型和自定义按钮标签。\r\n   *\r\n   * Props:\r\n   * - onFileSelect (function): 文件选择后的回调函数,接受一个文件对象作为参数。\r\n   * - acceptedFileTypes (string): 接受的文件类型,用于限制文件选择器中可见的文件类型。例如:\".pdf,.doc,.docx,.txt\"\r\n   * - label (string): 按钮上的文本标签。\r\n   *\r\n   * Usage:\r\n   * const handleFileSelect = (file) => {\r\n   *         setFileName(file.name);\r\n   *     };\r\n   *\r\n   * <FileUpload\r\n   *   onFileSelect={handleFileSelect}\r\n   *   acceptedFileTypes=\".pdf,.doc,.docx,.txt\"\r\n   *   label=\"Upload Document\"\r\n   * />\r\n   *\r\n   * @param {Object} props - 组件的属性对象\r\n   * @returns {JSX.Element} - FileUpload 组件的 JSX 元素\r\n   */\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        onFileSelect(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      accept: acceptedFileTypes,\n      style: {\n        display: 'none'\n      },\n      id: \"file-upload\",\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file-upload\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        component: \"span\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","Button","jsxDEV","_jsxDEV","FileUpload","onFileSelect","acceptedFileTypes","label","handleFileChange","event","file","target","files","reader","FileReader","onload","e","result","readAsDataURL","children","accept","style","display","id","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","variant","color","component","_c","$RefreshReg$"],"sources":["D:/SE-project/textbook_genius/frontend/reactapp/src/components/FileUpload.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button } from '@mui/material';\r\n\r\n\r\nconst FileUpload = ({ onFileSelect, acceptedFileTypes, label }) => {\r\n    /**\r\n     * FileUpload 组件\r\n     *\r\n     * 用于上传文件的通用组件。支持指定文件类型和自定义按钮标签。\r\n     *\r\n     * Props:\r\n     * - onFileSelect (function): 文件选择后的回调函数,接受一个文件对象作为参数。\r\n     * - acceptedFileTypes (string): 接受的文件类型,用于限制文件选择器中可见的文件类型。例如:\".pdf,.doc,.docx,.txt\"\r\n     * - label (string): 按钮上的文本标签。\r\n     *\r\n     * Usage:\r\n     * const handleFileSelect = (file) => {\r\n     *         setFileName(file.name);\r\n     *     };\r\n     *\r\n     * <FileUpload\r\n     *   onFileSelect={handleFileSelect}\r\n     *   acceptedFileTypes=\".pdf,.doc,.docx,.txt\"\r\n     *   label=\"Upload Document\"\r\n     * />\r\n     *\r\n     * @param {Object} props - 组件的属性对象\r\n     * @returns {JSX.Element} - FileUpload 组件的 JSX 元素\r\n     */\r\n    const handleFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                onFileSelect(e.target.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                accept={acceptedFileTypes}\r\n                style={{ display: 'none' }}\r\n                id=\"file-upload\"\r\n                type=\"file\"\r\n                onChange={handleFileChange}\r\n            />\r\n            <label htmlFor=\"file-upload\">\r\n                <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                    {label}\r\n                </Button>\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FileUpload;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGvC,MAAMC,UAAU,GAAGA,CAAC;EAAEC,YAAY;EAAEC,iBAAiB;EAAEC;AAAM,CAAC,KAAK;EAC/D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;IAChC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIF,IAAI,EAAE;MACN,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;QACnBX,YAAY,CAACW,CAAC,CAACL,MAAM,CAACM,MAAM,CAAC;MACjC,CAAC;MACDJ,MAAM,CAACK,aAAa,CAACR,IAAI,CAAC;IAC9B;EACJ,CAAC;EAED,oBACIP,OAAA;IAAAgB,QAAA,gBACIhB,OAAA;MACIiB,MAAM,EAAEd,iBAAkB;MAC1Be,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO,CAAE;MAC3BC,EAAE,EAAC,aAAa;MAChBC,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAEjB;IAAiB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACF1B,OAAA;MAAO2B,OAAO,EAAC,aAAa;MAAAX,QAAA,eACxBhB,OAAA,CAACF,MAAM;QAAC8B,OAAO,EAAC,WAAW;QAACC,KAAK,EAAC,SAAS;QAACC,SAAS,EAAC,MAAM;QAAAd,QAAA,EACvDZ;MAAK;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEd,CAAC;AAACK,EAAA,GApDI9B,UAAU;AAsDhB,eAAeA,UAAU;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}